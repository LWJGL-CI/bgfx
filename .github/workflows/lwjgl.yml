name: LWJGL Build

on:
  push:
    branches:
      - master

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  S3_PARAMS: --cache-control "public,must-revalidate,proxy-revalidate,max-age=0"

jobs:
  linux:
    name: Linux
    runs-on: ${{matrix.runner}}
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm32, arm64]
        include:
          # -----
          - ARCH: x64
            runner: ubuntu-18.04
            PACKAGES: libgl1-mesa-dev x11proto-dev libx11-dev
            OUTPUT_DIR: linux64_gcc
          # -----
          - ARCH: arm32
            runner: ubuntu-18.04
            CROSS_ARCH: armhf
            PACKAGES: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf libc6-dev-armhf-cross
            CROSS_PACKAGES: libgl1-mesa-dev:armhf x11proto-dev:armhf libx11-dev:armhf
            OUTPUT_DIR: linux32_arm_gcc
          # -----
          - ARCH: arm64
            runner: ubuntu-18.04
            CROSS_ARCH: arm64
            PACKAGES: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu libc6-dev-arm64-cross
            CROSS_PACKAGES: libgl1-mesa-dev:arm64 x11proto-dev:arm64 libx11-dev:arm64
            OUTPUT_DIR: linux64_arm_gcc
          # -----
          - ARCH: ppc64el
            runner: ubuntu-18.04
            CROSS_ARCH: ppc64el
            PACKAGES: gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu libc6-dev-ppc64el-cross
            CROSS_PACKAGES: libgl1-mesa-dev:ppc64el x11proto-dev:ppc64el libx11-dev:ppc64el
            OUTPUT_DIR: linux64_ppc_gcc
          # -----
#          - ARCH: mips64
#            runner: ubuntu-18.04
#            CROSS_ARCH: mips64el
#            PACKAGES: gcc-mips64el-linux-gnuabi64 g++-mips64el-linux-gnuabi64 libc6-dev-mips64el-cross
#            CROSS_PACKAGES: libgl1-mesa-dev:mips64el x11proto-dev:mips64el libx11-dev:mips64el mesa-common-dev:mips64el libgl1-mesa-glx:mips64el libdrm-dev:mips64el libdrm2:mips64el libdrm-radeon1:mips64el libdrm-nouveau2:mips64el libdrm-amdgpu1:mips64el libglapi-mesa:mips64el
#            OUTPUT_DIR: linux64_mips_gcc
    env:
      LWJGL_ARCH: ${{matrix.ARCH}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - run: |
          git clone https://github.com/LWJGL-CI/bx.git ../bx
          git clone https://github.com/LWJGL-CI/bimg.git ../bimg
        name: Clone bx & bimg
      - run: |
          git clone https://github.com/bkaradzic/GENie.git ../GENie
          cd ../GENie
          make
        name: Clone and build GENie
      - run: |
          sudo apt-get update
          sudo apt-get -yq install ${{matrix.PACKAGES}}
        name: Install dependencies
      - run: |
          if [[ "${{matrix.ARCH}}" != "mips64" ]]
          then
            sudo sed -i 's/deb http/deb [arch=amd64,i386] http/' /etc/apt/sources.list
            sudo grep "ubuntu.com/ubuntu" /etc/apt/sources.list | sudo tee /etc/apt/sources.list.d/ports.list
            if [[ "${{matrix.ARCH}}" == "arm32" || "${{matrix.ARCH}}" == "arm64" ]]
            then
              sudo sed -i 's/amd64,i386/armhf,arm64/' /etc/apt/sources.list.d/ports.list
            elif [[ "${{matrix.ARCH}}" == "ppc64el" ]]
            then
              sudo sed -i 's/amd64,i386/ppc64el,ppc64el/' /etc/apt/sources.list.d/ports.list
            fi
            sudo sed -i 's#http://.*/ubuntu#http://ports.ubuntu.com/ubuntu-ports#' /etc/apt/sources.list.d/ports.list
          else
            sudo rm -rf /etc/apt/sources.list
            sudo sh -c "echo 'deb http://deb.debian.org/debian stretch main' >> /etc/apt/sources.list"
          fi
          sudo dpkg --add-architecture ${{matrix.CROSS_ARCH}}
          sudo apt-get update || true
        if: contains(matrix.ARCH, 'x64') != true
        name: Prepare cross-compilation
      - run: sudo apt-get -yq --allow-unauthenticated --no-install-suggests --no-install-recommends install ${{matrix.CROSS_PACKAGES}} -o Dpkg::Options::="--force-overwrite"
        if: contains(matrix.ARCH, 'x64') != true
        name: Install cross-compilation dependencies
      - run: | #sudo ln -s /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 /usr/lib/libGL.so
          ../GENie/bin/linux/genie --with-shared-lib --with-tools --gcc=linux-gcc gmake
          make -R -C .build/projects/gmake-linux config=release64 CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" bgfx-shared-lib
          strip .build/linux64_gcc/bin/libbgfx-shared-libRelease.so
        name: Build bgfx (x64)
        if: contains(matrix.ARCH, 'x64')
      - run: | #sudo ln -s /usr/lib/arm-linux-gnueabihf/mesa/libGL.so.1 /usr/lib/libGL.so
          sed -i 's/strip -s/arm-linux-gnueabihf-strip/' ../bx/scripts/toolchain.lua
          ../GENie/bin/linux/genie --with-shared-lib --gcc=linux-arm-gcc gmake
          make -R -C .build/projects/gmake-linux-arm-gcc config=release CXX="arm-linux-gnueabihf-g++" CC="arm-linux-gnueabihf-gcc" CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" bgfx-shared-lib
          arm-linux-gnueabihf-strip .build/linux32_arm_gcc/bin/libbgfx-shared-libRelease.so
        name: Build bgfx (arm32)
        if: contains(matrix.ARCH, 'arm32')
      - run: | #sudo ln -s /usr/lib/aarch64-linux-gnu/mesa/libGL.so.1 /usr/lib/libGL.so
          sed -i 's/strip -s/aarch64-linux-gnu-strip/' ../bx/scripts/toolchain.lua
          ../GENie/bin/linux/genie --with-shared-lib --gcc=linux-arm-gcc gmake
          sed -i 's/ -m64//' .build/projects/gmake-linux-arm-gcc/bgfx.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-arm-gcc/bgfx-shared-lib.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-arm-gcc/bimg.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-arm-gcc/bimg_decode.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-arm-gcc/bx.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-arm-gcc/bgfx.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-arm-gcc/bgfx-shared-lib.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-arm-gcc/bimg.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-arm-gcc/bimg_decode.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-arm-gcc/bx.make
          make -R -C .build/projects/gmake-linux-arm-gcc config=release64 CXX="aarch64-linux-gnu-g++" CC="aarch64-linux-gnu-gcc" CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" bgfx-shared-lib
          aarch64-linux-gnu-strip .build/linux64_arm_gcc/bin/libbgfx-shared-libRelease.so
        name: Build bgfx (arm64)
        if: contains(matrix.ARCH, 'ppc64el')
      - run: | #sudo ln -s /usr/lib/powerpc64le-linux-gnu/mesa/libGL.so.1 /usr/lib/libGL.so
          sed -i 's/strip -s/powerpc64le-linux-gnu-strip/' ../bx/scripts/toolchain.lua
          ../GENie/bin/linux/genie --with-shared-lib --gcc=linux-ppc-gcc gmake
          sed -i 's/ -m64//' .build/projects/gmake-linux-ppc-gcc/bgfx.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-ppc-gcc/bgfx-shared-lib.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-ppc-gcc/bimg.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-ppc-gcc/bimg_decode.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-ppc-gcc/bx.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-ppc-gcc/bgfx.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-ppc-gcc/bgfx-shared-lib.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-ppc-gcc/bimg.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-ppc-gcc/bimg_decode.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-ppc-gcc/bx.make
          make -R -C .build/projects/gmake-linux-ppc-gcc config=release64 CXX="powerpc64le-linux-gnu-g++" CC="powerpc64le-linux-gnu-gcc" CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" bgfx-shared-lib
          powerpc64le-linux-gnu-strip .build/linux64_ppc_gcc/bin/libbgfx-shared-libRelease.so
        name: Build bgfx (ppc64el)
        if: contains(matrix.ARCH, 'ppc64el')
      - run: | #sudo ln -s /usr/lib/mips64el-linux-gnuabi64/mesa/libGL.so.1 /usr/lib/libGL.so
          sed -i 's/strip -s/mips64el-linux-gnuabi64-strip/' ../bx/scripts/toolchain.lua
          ../GENie/bin/linux/genie --with-shared-lib --gcc=linux-mips-gcc gmake
          sed -i 's/ -m64//' .build/projects/gmake-linux-mips-gcc/bgfx.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-mips-gcc/bgfx-shared-lib.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-mips-gcc/bimg.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-mips-gcc/bimg_decode.make
          sed -i 's/ -m64//' .build/projects/gmake-linux-mips-gcc/bx.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-mips-gcc/bgfx.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-mips-gcc/bgfx-shared-lib.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-mips-gcc/bimg.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-mips-gcc/bimg_decode.make
          sed -i 's/linux32/linux64/g' .build/projects/gmake-linux-mips-gcc/bx.make
          make -R -C .build/projects/gmake-linux-mips-gcc config=release64 CXX="mips64el-linux-gnuabi64-g++" CC="mips64el-linux-gnuabi64-gcc" CFLAGS="-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=0" bgfx-shared-lib
          mips64el-linux-gnuabi64-strip .build/linux64_mips_gcc/bin/libbgfx-shared-libRelease.so
        name: Build bgfx (mips64)
        if: contains(matrix.ARCH, 'mips64')
      - run: make -R -C .build/projects/gmake-linux config=release64 geometryc
        name: Build geometryc
        if: contains(matrix.ARCH, 'x64')
      - run: make -R -C .build/projects/gmake-linux config=release64 texturec
        name: Build texturec
        if: contains(matrix.ARCH, 'x64')
      - run: make -R -C .build/projects/gmake-linux config=release64 texturev
        name: Build texturev
        if: contains(matrix.ARCH, 'x64')
      - run: make -R -C .build/projects/gmake-linux config=release64 shaderc
        name: Build shaderc
        if: contains(matrix.ARCH, 'x64')
      - run: aws s3 cp .build/${{matrix.OUTPUT_DIR}}/bin/libbgfx-shared-libRelease.so s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/libbgfx.so $S3_PARAMS
        name: Upload artifact
      - run: |
          aws s3 cp .build/linux64_gcc/bin/geometrycRelease s3://lwjgl-build/nightly/linux/x64/bgfx-tools/geometryc $S3_PARAMS
          aws s3 cp .build/linux64_gcc/bin/texturecRelease s3://lwjgl-build/nightly/linux/x64/bgfx-tools/texturec $S3_PARAMS
          aws s3 cp .build/linux64_gcc/bin/texturevRelease s3://lwjgl-build/nightly/linux/x64/bgfx-tools/texturev $S3_PARAMS
          aws s3 cp .build/linux64_gcc/bin/shadercRelease s3://lwjgl-build/nightly/linux/x64/bgfx-tools/shaderc $S3_PARAMS
        name: Upload tools
        if: contains(matrix.ARCH, 'x64')
      - run: |
          git log --first-parent --pretty=format:%H HEAD~2..HEAD~1 > libbgfx.so.git
          aws s3 cp libbgfx.so.git s3://lwjgl-build/nightly/linux/${{matrix.ARCH}}/ $S3_PARAMS
        name: Upload git revision

  macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x64, arm64]
        include:
          - ARCH: x64
            PLATFORM: osx-x64
            GENIE_PARAMS: --with-macos=10.9
            CC:
          - ARCH: arm64
            PLATFORM: osx-arm64
            GENIE_PARAMS: --with-macos=11.0
            CC: SDKROOT=$(xcrun -sdk macosx11.1 --show-sdk-path) MACOSX_DEPLOYMENT_TARGET=$(xcrun -sdk macosx11.1 --show-sdk-platform-version)
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - run: |
          git clone https://github.com/LWJGL-CI/bx.git ../bx
          git clone https://github.com/LWJGL-CI/bimg.git ../bimg
        name: Clone bx & bimg
      - run: |
          ${{matrix.CC}} ../bx/tools/bin/darwin/genie --with-shared-lib --with-tools ${{matrix.GENIE_PARAMS}} --gcc=${{matrix.PLATFORM}} gmake
        name: Configure build
      - run: |
          ${{matrix.CC}} make -C .build/projects/gmake-${{matrix.PLATFORM}} config=release64 CFLAGS="-D BGFX_CONFIG_RENDERER_METAL=1 -D BGFX_CONFIG_RENDERER_OPENGL=1" bgfx-shared-lib
          strip -u -r .build/${{matrix.PLATFORM}}/bin/libbgfx-shared-libRelease.dylib
        name: Build bgfx
      - run: ${{matrix.CC}} make -C .build/projects/gmake-${{matrix.PLATFORM}} config=release64 geometryc
        name: Build geometryc
      - run: ${{matrix.CC}} make -C .build/projects/gmake-${{matrix.PLATFORM}} config=release64 texturec
        name: Build texturec
      - run: ${{matrix.CC}} make -C .build/projects/gmake-${{matrix.PLATFORM}} config=release64 texturev
        name: Build texturev
      - run: ${{matrix.CC}} make -C .build/projects/gmake-${{matrix.PLATFORM}} config=release64 shaderc
        name: Build shaderc
      - run: |
          aws s3 cp .build/${{matrix.PLATFORM}}/bin/libbgfx-shared-libRelease.dylib s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/libbgfx.dylib $S3_PARAMS
          aws s3 cp .build/${{matrix.PLATFORM}}/bin/geometrycRelease s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/bgfx-tools/geometryc $S3_PARAMS
          aws s3 cp .build/${{matrix.PLATFORM}}/bin/texturecRelease s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/bgfx-tools/texturec $S3_PARAMS
          aws s3 cp .build/${{matrix.PLATFORM}}/bin/texturevRelease s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/bgfx-tools/texturev $S3_PARAMS
          aws s3 cp .build/${{matrix.PLATFORM}}/bin/shadercRelease s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/bgfx-tools/shaderc $S3_PARAMS
        name: Upload artifacts
      - run: |
          git log --first-parent --pretty=format:%H HEAD~2..HEAD~1 > libbgfx.dylib.git
          aws s3 cp libbgfx.dylib.git s3://lwjgl-build/nightly/macosx/${{matrix.ARCH}}/ $S3_PARAMS
        name: Upload git revision

  windows:
    name: Windows
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        ARCH: [x86, x64]
        include:
          - ARCH: x86
            MSVC_ARCH: amd64_x86
            PLATFORM: x32
            BUILD: Win32
            OUTPUT_DIR: win32_vs2022
          - ARCH: x64
            MSVC_ARCH: amd64
            PLATFORM: x64
            BUILD: x64
            OUTPUT_DIR: win64_vs2022
#          - ARCH: arm64
#            MSVC_ARCH: amd64_arm64
#            PLATFORM: arm64
#            BUILD: arm64
#            OUTPUT_DIR: win64_vs2022
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 3
      - run: |
          git clone https://github.com/LWJGL-CI/bx.git ../bx
          git clone https://github.com/LWJGL-CI/bimg.git ../bimg
        name: Clone bx & bimg
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.MSVC_ARCH}}
          ..\bx\tools\bin\windows\genie --with-shared-lib --with-tools vs2022 --platform ${{matrix.PLATFORM}}
        shell: cmd
        name: Configure build
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.MSVC_ARCH}}
          devenv .build\projects\vs2022\bgfx.sln /Project bgfx-shared-lib /Build "Release|${{matrix.BUILD}}"
        shell: cmd
        name: Build bgfx
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.MSVC_ARCH}}
          devenv .build\projects\vs2022\bgfx.sln /Project geometryc /Build "Release|${{matrix.BUILD}}"
        shell: cmd
        name: Build geometryc
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.MSVC_ARCH}}
          devenv .build\projects\vs2022\bgfx.sln /Project texturec /Build "Release|${{matrix.BUILD}}"
        shell: cmd
        name: Build texturec
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.MSVC_ARCH}}
          devenv .build\projects\vs2022\bgfx.sln /Project texturev /Build "Release|${{matrix.BUILD}}"
        shell: cmd
        name: Build texturev
      - run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{matrix.MSVC_ARCH}}
          devenv .build\projects\vs2022\bgfx.sln /Project "shaderc (tools\shaderc\shaderc)" /Build "Release|${{matrix.BUILD}}"
        shell: cmd
        name: Build shaderc
      - run: |
          aws s3 cp .build/${{matrix.OUTPUT_DIR}}/bin/bgfx-shared-libRelease.dll s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/bgfx.dll ${{env.S3_PARAMS}}
          aws s3 cp .build/${{matrix.OUTPUT_DIR}}/bin/geometrycRelease.exe s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/bgfx-tools/geometryc.exe ${{env.S3_PARAMS}}
          aws s3 cp .build/${{matrix.OUTPUT_DIR}}/bin/texturecRelease.exe s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/bgfx-tools/texturec.exe ${{env.S3_PARAMS}}
          aws s3 cp .build/${{matrix.OUTPUT_DIR}}/bin/texturevRelease.exe s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/bgfx-tools/texturev.exe ${{env.S3_PARAMS}}
          aws s3 cp .build/${{matrix.OUTPUT_DIR}}/bin/shadercRelease.exe s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/bgfx-tools/shaderc.exe ${{env.S3_PARAMS}}
        shell: cmd
        name: Upload artifacts
      - run: |
          git log --first-parent --pretty=format:%%H HEAD~2..HEAD~1 > bgfx.dll.git
          aws s3 cp bgfx.dll.git s3://lwjgl-build/nightly/windows/${{matrix.ARCH}}/ ${{env.S3_PARAMS}}
        shell: cmd
        name: Upload git revision
